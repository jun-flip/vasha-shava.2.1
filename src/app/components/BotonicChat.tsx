"use client";
import { useState, useRef, useEffect } from 'react';
import OrderConfirmationModal from './OrderConfirmationModal';
import { useCart } from '../context/CartContext';

function randomDelay(min = 700, max = 1200) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomFrom(arr: string[]) {
  return arr[Math.floor(Math.random() * arr.length)];
}

type Step = 'greeting' | 'name' | 'phone' | 'delivery' | 'address' | 'street' | 'house' | 'apartment' | 'entrance' | 'floor' | 'pickup' | 'order' | 'comment' | 'confirm' | 'success';

interface OrderData {
  name: string;
  phone: string;
  deliveryType: 'delivery' | 'pickup';
  address?: {
    street: string;
    house: string;
    apartment: string;
    entrance: string;
    floor: string;
  };
  pickupTime?: string;
  items: Array<{
    name: string;
    price: number;
    quantity: number;
  }>;
  total: number;
  comment: string;
}

// Helper to convert bot order items to CartItem[] for modal
function toCartItems(items: Array<{ name: string; price: number; quantity: number }>) {
  return items.map((item, idx) => ({
    id: String(idx),
    name: item.name,
    price: item.price,
    quantity: item.quantity,
    image: '', // –∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å placeholder
    selectedAdditives: []
  }));
}

export default function BotonicChat() {
  const [isOpen, setIsOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState<Step>('greeting');
  const cartContext = useCart();
  const [orderData, setOrderData] = useState<OrderData>({
    name: '',
    phone: '',
    deliveryType: 'delivery',
    address: {
      street: '',
      house: '',
      apartment: '',
      entrance: '',
      floor: ''
    },
    items: [],
    total: 0,
    comment: ''
  });
  const [inputValue, setInputValue] = useState('');
  const [messages, setMessages] = useState([
    { id: 1, text: randomFrom([
      '–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è üòä'
    ]), isBot: true }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const chatRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [dishStep, setDishStep] = useState<'name' | 'quantity' | null>(null);
  const [selectedDish, setSelectedDish] = useState<{ id: number; name: string; price: number } | null>(null);
  const [dishInput, setDishInput] = useState('');
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [confirmData, setConfirmData] = useState<OrderData | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
  const syncBotDataWithCart = (itemsToSync?: Array<{ name: string; price: number; quantity: number }>) => {
    const itemsToUse = itemsToSync || orderData.items;
    
    console.log('BotonicChat: syncBotDataWithCart –≤—ã–∑–≤–∞–Ω–∞');
    console.log('BotonicChat: cartContext –¥–æ—Å—Ç—É–ø–µ–Ω:', !!cartContext);
    console.log('BotonicChat: itemsToUse:', itemsToUse);
    console.log('BotonicChat: itemsToUse.length:', itemsToUse.length);
    
    if (cartContext && itemsToUse.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const currentCartItems = cartContext.items || [];
      console.log('BotonicChat: —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:', currentCartItems);
      
      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
      if (currentCartItems.length === 0) {
        console.log('BotonicChat: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã');
      } else {
        console.log('BotonicChat: –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã, –æ—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ');
        cartContext.clearCart();
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª—é–¥–∞ –∏–∑ –±–æ—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
      itemsToUse.forEach((item, index) => {
        console.log('BotonicChat: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É:', item);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        for (let i = 0; i < item.quantity; i++) {
          cartContext.addItem({
            id: `bot-${index}-${i}`,
            name: item.name,
            price: item.price,
            quantity: 1, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –Ω–æ item.quantity —Ä–∞–∑
            image: '',
            selectedAdditives: []
          });
        }
      });
      console.log('BotonicChat: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
      const cartItems = itemsToUse.map((item, index) => ({
        id: `bot-${index}`,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
        image: '',
        selectedAdditives: []
      }));
      console.log('BotonicChat: –≥–æ—Ç–æ–≤–∏–º cartItems –¥–ª—è localStorage:', cartItems);
      console.log('BotonicChat: JSON.stringify(cartItems):', JSON.stringify(cartItems));
      
      localStorage.setItem('cart', JSON.stringify(cartItems));
      console.log('BotonicChat: –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage:', cartItems);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      const savedCart = localStorage.getItem('cart');
      console.log('BotonicChat: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', savedCart);
      console.log('BotonicChat: JSON.parse(savedCart):', savedCart ? JSON.parse(savedCart) : null);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ localStorage
      console.log('BotonicChat: –≤—Å–µ –∫–ª—é—á–∏ –≤ localStorage:', Object.keys(localStorage));
    } else {
      console.error('BotonicChat: cartContext –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ itemsToUse –ø—É—Å—Ç–æ–π');
      console.error('BotonicChat: cartContext:', !!cartContext);
      console.error('BotonicChat: itemsToUse.length:', itemsToUse.length);
    }
  };

  const menuItems = [
    { id: 1, name: '–ö–ª–∞—Å—Å–∏–∫–∞', price: 200 },
    { id: 2, name: '–ö–ª–∞—Å—Å–∏–∫–∞ XL', price: 290 },
    { id: 3, name: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è', price: 220 },
    { id: 4, name: '–û—Å—Ç—Ä—ã–π –ª–∞–≤–∞—à', price: 350 },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–ø-–∞–ø–∞
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (chatRef.current && !chatRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    if (isOpen && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages, isTyping, isOpen]);

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç..."
  const addBotMessage = (text: string) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      setMessages(prev => [...prev, { id: Date.now(), text, isBot: true }]);
    }, randomDelay());
  };

  const addUserMessage = (text: string) => {
    setMessages(prev => [...prev, { id: Date.now(), text, isBot: false }]);
  };

  const handleSend = async () => {
    if (!inputValue.trim()) return;
    const userMessage = inputValue.trim();
    addUserMessage(userMessage);
    setInputValue('');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —à–∞–≥–∞–º
    switch (currentStep) {
      case 'greeting':
        setOrderData(prev => ({ ...prev, name: userMessage }));
        setCurrentStep('phone');
        addBotMessage(randomFrom([
          `–†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, ${userMessage}! üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`,
          `–°–ø–∞—Å–∏–±–æ, ${userMessage}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`,
          `–û—Ç–ª–∏—á–Ω–æ, ${userMessage}! –ö–∞–∫–æ–π —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?`
        ]));
        break;

      case 'name':
        setOrderData(prev => ({ ...prev, name: userMessage }));
        setCurrentStep('phone');
        addBotMessage('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        break;

      case 'phone':
        setOrderData(prev => ({ ...prev, phone: userMessage }));
        setCurrentStep('delivery');
        addBotMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:');
        break;

      case 'delivery':
        if (userMessage.toLowerCase().includes('–¥–æ—Å—Ç–∞–≤–∫–∞')) {
          setOrderData(prev => ({ ...prev, deliveryType: 'delivery' }));
          setCurrentStep('street');
          addBotMessage('–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –¥–æ—Å—Ç–∞–≤–∫–∏ üè†:');
        } else if (userMessage.toLowerCase().includes('—Å–∞–º–æ–≤—ã–≤–æ–∑')) {
          setOrderData(prev => ({ ...prev, deliveryType: 'pickup' }));
          setCurrentStep('pickup');
          addBotMessage('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30). –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 21:00:');
        } else {
          addBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:');
        }
        break;

      case 'street':
        setOrderData(prev => ({ 
          ...prev, 
          address: { ...prev.address!, street: userMessage }
        }));
        setCurrentStep('house');
        addBotMessage('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:');
        break;

      case 'house':
        setOrderData(prev => ({ 
          ...prev, 
          address: { ...prev.address!, house: userMessage }
        }));
        setCurrentStep('apartment');
        addBotMessage('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:');
        break;

      case 'apartment':
        setOrderData(prev => ({ 
          ...prev, 
          address: { ...prev.address!, apartment: userMessage }
        }));
        setCurrentStep('entrance');
        addBotMessage('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞:');
        break;

      case 'entrance':
        setOrderData(prev => ({ 
          ...prev, 
          address: { ...prev.address!, entrance: userMessage }
        }));
        setCurrentStep('floor');
        addBotMessage('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞:');
        break;

      case 'floor':
        setOrderData(prev => ({ 
          ...prev, 
          address: { ...prev.address!, floor: userMessage }
        }));
        setCurrentStep('order');
        setDishStep('name');
        setDishInput('');
        addBotMessage('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é. –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: 150‚ÇΩ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 500‚ÇΩ)');
        break;
      case 'pickup': {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
        const [hours, minutes] = userMessage.split(':').map(Number);
        const pickupTime = hours * 60 + minutes;
        const openTime = 9 * 60; // 9:00
        const closeTime = 21 * 60; // 21:00
        if (pickupTime < openTime || pickupTime > closeTime) {
          addBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 21:00:');
          return;
        }
        setOrderData(prev => ({ ...prev, pickupTime: userMessage }));
        setCurrentStep('order');
        setDishStep('name');
        setDishInput('');
        addBotMessage('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é. –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.\n\nüè™ –°–∞–º–æ–≤—ã–≤–æ–∑ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ');
        break;
      }
      case 'order': {
        if (dishStep === 'name') {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±–ª—é–¥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          const found = menuItems.find(item => item.name.toLowerCase() === userMessage.toLowerCase());
          if (found) {
            setSelectedDish(found);
            setDishStep('quantity');
            addBotMessage(`–°–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ü–∏–π –±–ª—é–¥–∞ "${found.name}" –¥–æ–±–∞–≤–∏—Ç—å?`);
          } else {
            addBotMessage('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –±–ª—é–¥–æ. –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫.');
          }
          break;
        }
        if (dishStep === 'quantity' && selectedDish) {
          const quantity = parseInt(userMessage);
          if (!isNaN(quantity) && quantity > 0) {
            const newItem = {
              name: selectedDish.name,
              price: selectedDish.price,
              quantity: quantity
            };
            
            console.log('BotonicChat: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ:', newItem);
            console.log('BotonicChat: —Ç–µ–∫—É—â–∏–µ orderData.items:', orderData.items);
            
            setOrderData(prev => {
              const updatedOrderData = {
                ...prev,
                items: [...prev.items, newItem],
                total: prev.total + (selectedDish.price * quantity)
              };
              console.log('BotonicChat: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ orderData:', updatedOrderData);
              return updatedOrderData;
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É
            if (cartContext) {
              // –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
              for (let i = 0; i < quantity; i++) {
                cartContext.addItem({
                  id: `bot-${Date.now()}-${i}`,
                  name: selectedDish.name,
                  price: selectedDish.price,
                  quantity: 1, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –Ω–æ quantity —Ä–∞–∑
                  image: '',
                  selectedAdditives: []
                });
              }
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
              const updatedItems = [...orderData.items, newItem];
              const cartItems = updatedItems.map((item, index) => ({
                id: `bot-${index}`,
                name: item.name,
                price: item.price,
                quantity: item.quantity,
                image: '',
                selectedAdditives: []
              }));
              console.log('BotonicChat: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage cartItems:', cartItems);
              console.log('BotonicChat: JSON.stringify(cartItems):', JSON.stringify(cartItems));
              localStorage.setItem('cart', JSON.stringify(cartItems));
              console.log('BotonicChat: –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ localStorage:', cartItems);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
              const savedCart = localStorage.getItem('cart');
              console.log('BotonicChat: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', savedCart);
            }
            
            setDishStep('name');
            setSelectedDish(null);
            setDishInput('');
            setInputValue('');
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
            const newTotal = orderData.total + (selectedDish.price * quantity);
            const deliveryCost = orderData.deliveryType === 'delivery' && newTotal < 500 ? 150 : 0;
            const finalTotal = newTotal + deliveryCost;
            
            addBotMessage(randomFrom([
              `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${newItem.name} x${quantity} - ${selectedDish.price * quantity}‚ÇΩ. üçΩÔ∏è`,
              `–ó–∞–ø–∏—Å–∞–ª: ${newItem.name} x${quantity} (${selectedDish.price * quantity}‚ÇΩ).`,
              `–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! ${newItem.name} x${quantity} ‚Äî ${selectedDish.price * quantity}‚ÇΩ.`
            ]) + `\n\nüí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${newTotal}‚ÇΩ${deliveryCost > 0 ? `\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryCost}‚ÇΩ` : ''}\nüí≥ –ò—Ç–æ–≥–æ: ${finalTotal}‚ÇΩ\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –∑–∞–∫–∞–∑? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑".`);
          } else {
            addBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).');
          }
          break;
        }
        if (userMessage.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
          setCurrentStep('comment');
          setDishStep(null);
          setSelectedDish(null);
          setDishInput('');
          addBotMessage('–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ω–µ –∑–≤–æ–Ω–∏—Ç—å –≤ –¥–≤–µ—Ä—å" –∏–ª–∏ "–æ—Å—Ç–∞–≤–∏—Ç—å —É –∫–æ–Ω—Å—å–µ—Ä–∂–∞"). –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç":');
          return;
        }
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω –∏–∑ –∫–µ–π—Å–æ–≤ ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–æ
        addBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –º–µ–Ω—é. –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫.');
        break;
      }
      case 'comment': {
        setOrderData(prev => ({ ...prev, comment: userMessage.trim() }));
        setInputValue('');
        setIsTyping(false);
        setCurrentStep('confirm');
        handleConfirmOrder(userMessage.trim());
        break;
      }
    }
  };

  const handleConfirmOrder = async (comment?: string) => {
    setCurrentStep('confirm');
    const deliveryText = orderData.deliveryType === 'delivery' 
      ? `–ê–¥—Ä–µ—Å: ${orderData.address?.street}, –¥. ${orderData.address?.house}, –∫–≤. ${orderData.address?.apartment}, –ø–æ–¥—ä–µ–∑–¥ ${orderData.address?.entrance}, —ç—Ç–∞–∂ ${orderData.address?.floor}`
      : `–°–∞–º–æ–≤—ã–≤–æ–∑ –≤ ${orderData.pickupTime}`;
    const deliveryCost = orderData.deliveryType === 'delivery' && orderData.total < 500 ? 150 : 0;
    const finalTotal = orderData.total + deliveryCost;
    addBotMessage(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\nüë§ –ò–º—è: ${orderData.name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}\nüìç ${deliveryText}\n\nüçΩ –ó–∞–∫–∞–∑:\n${orderData.items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`).join('\n')}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryCost}‚ÇΩ\nüí∞ –ò—Ç–æ–≥–æ: ${finalTotal}‚ÇΩ${comment ? `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : orderData.comment ? `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment}` : ''}\n\n–ù–∞–ø–∏—à–∏—Ç–µ "–¥–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`);
  };

  const handleFinalConfirm = async () => {
    if (inputValue.toLowerCase().includes('–¥–∞')) {
      setCurrentStep('success');
      addBotMessage(randomFrom([
        '‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ü•≥',
        '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üöÄ',
        '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üòã'
      ]));
      try {
        const deliveryText = orderData.deliveryType === 'delivery' 
          ? `${orderData.address?.street}, –¥. ${orderData.address?.house}, –∫–≤. ${orderData.address?.apartment}, –ø–æ–¥—ä–µ–∑–¥ ${orderData.address?.entrance}, —ç—Ç–∞–∂ ${orderData.address?.floor}`
          : `–°–∞–º–æ–≤—ã–≤–æ–∑ –≤ ${orderData.pickupTime}`;
        const deliveryCost = orderData.deliveryType === 'delivery' && orderData.total < 500 ? 150 : 0;
        const finalTotal = orderData.total + deliveryCost;
        const orderPayload = {
          name: orderData.name,
          phone: orderData.phone,
          address: deliveryText,
          items: orderData.items,
          total: finalTotal,
          comment: orderData.comment || '–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç'
        };
        await fetch('/api/telegram', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(orderPayload)
        });
      } catch (error) {
        addBotMessage('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–∞–π—Ç.');
      }
    } else if (inputValue.toLowerCase().includes('–Ω–µ—Ç')) {
      addBotMessage(randomFrom([
        '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–∞–π—Ç.',
        '–ü–æ–Ω—è–ª, –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!'
      ]));
      setCurrentStep('greeting');
      setOrderData({ 
        name: '', 
        phone: '', 
        deliveryType: 'delivery', 
        address: { street: '', house: '', apartment: '', entrance: '', floor: '' },
        items: [], 
        total: 0,
        comment: ''
      });
    } else {
      addBotMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ "–¥–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
    setInputValue('');
  };

  const handleInputSubmit = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      if (currentStep === 'confirm') {
        handleFinalConfirm();
      } else {
        handleSend();
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
  const handleDeliveryChoice = (choice: 'delivery' | 'pickup') => {
    if (choice === 'delivery') {
      setOrderData(prev => ({ ...prev, deliveryType: 'delivery' }));
      setCurrentStep('street');
      addBotMessage('–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –¥–æ—Å—Ç–∞–≤–∫–∏ üè†:');
    } else {
      setOrderData(prev => ({ ...prev, deliveryType: 'pickup' }));
      setCurrentStep('pickup');
      addBotMessage('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30). –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 21:00:');
    }
  };

  // –î–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª—é–¥
  const filteredDishes = dishStep === 'name' && dishInput
    ? menuItems.filter(item => item.name.toLowerCase().includes(dishInput.toLowerCase()))
    : [];

  const isOrderReady =
    orderData.name &&
    orderData.phone &&
    (
      (orderData.deliveryType === 'delivery' &&
        orderData.address?.street &&
        orderData.address?.house &&
        orderData.address?.apartment &&
        orderData.address?.entrance &&
        orderData.address?.floor
      ) ||
      (orderData.deliveryType === 'pickup' && orderData.pickupTime)
    );

  useEffect(() => {
    // Expose a global function to open the chat from anywhere
    (window as any).openVashaShavaChat = () => setIsOpen(true);
    return () => {
      if ((window as any).openVashaShavaChat) {
        delete (window as any).openVashaShavaChat;
      }
    };
  }, []);

  return (
    <div className="fixed bottom-4 right-4 z-50" ref={chatRef}>
      {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ - —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –ø–æ–ø-–∞–ø */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="w-16 h-16 bg-[#8fc52f] text-white rounded-full shadow-lg hover:bg-[#7db02a] transition-colors flex items-center justify-center"
        >
          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        </button>
      )}

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      {isOpen && (
        <div className="absolute bottom-0 right-0 w-80 max-w-[95vw] sm:w-80 h-96 max-h-[90vh] bg-white rounded-lg shadow-xl border flex flex-col">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="bg-[#8fc52f] text-white p-4 rounded-t-lg">
            <h3 className="font-semibold">–õ–∞–≤–∞—à–∏–∫</h3>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="h-64 overflow-y-auto p-4 space-y-3 flex-1">
            {messages.map(message => (
              <div
                key={message.id}
                className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
              >
                <div
                  className={`max-w-xs px-3 py-2 rounded-lg whitespace-pre-line ${
                    message.isBot
                      ? 'bg-gray-100 text-gray-800'
                      : 'bg-[#8fc52f] text-white'
                  }`}
                >
                  {message.text}
                  {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
                  {message.isBot && currentStep === 'delivery' && message.text === '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:' && (
                    <div className="mt-3 space-y-2">
                      <button
                        onClick={() => handleDeliveryChoice('delivery')}
                        className="w-full px-4 py-2 bg-[#8fc52f] text-white rounded-lg hover:bg-[#7db02a] transition-colors text-sm font-medium"
                      >
                        üöö –î–æ—Å—Ç–∞–≤–∫–∞
                      </button>
                      <button
                        onClick={() => handleDeliveryChoice('pickup')}
                        className="w-full px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium"
                      >
                        üè™ –°–∞–º–æ–≤—ã–≤–æ–∑
                      </button>
                    </div>
                  )}
                </div>
              </div>
            ))}
            {isTyping && (
              <div className="flex justify-start">
                <div className="max-w-xs px-3 py-2 rounded-lg bg-gray-200 text-gray-500 animate-pulse">
                  –ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç<span className="animate-bounce">...</span>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div className="p-4 border-t">
            <div className="flex space-x-2">
              <input
                type="text"
                value={dishStep === 'name' ? dishInput : inputValue}
                onChange={(e) => {
                  if (dishStep === 'name') setDishInput(e.target.value);
                  else setInputValue(e.target.value);
                }}
                onKeyPress={handleInputSubmit}
                placeholder={dishStep === 'name' ? '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞...' : '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#8fc52f] text-black"
                disabled={isTyping}
              />
              <button
                onClick={currentStep === 'confirm' ? handleFinalConfirm : handleSend}
                className="px-4 py-2 bg-[#8fc52f] text-white rounded-lg hover:bg-[#7db02a] transition-colors flex items-center justify-center"
                disabled={isTyping}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                </svg>
              </button>
            </div>
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –±–ª—é–¥–∞–º */}
            {dishStep === 'name' && filteredDishes.length > 0 && (
              <div className="mt-2 bg-white border rounded shadow max-h-32 overflow-y-auto">
                {filteredDishes.map(dish => (
                  <div
                    key={dish.id}
                    className="px-4 py-2 cursor-pointer hover:bg-[#f3f4f6] flex justify-between items-center"
                    onClick={() => {
                      setDishInput(dish.name);
                      setTimeout(() => {
                        setInputValue(dish.name);
                        setTimeout(() => handleSend(), 100);
                      }, 50);
                    }}
                  >
                    <span className="font-semibold text-black">{dish.name}</span>
                    <span className="ml-2 text-gray-500 whitespace-nowrap">{dish.price}‚ÇΩ</span>
                  </div>
                ))}
              </div>
            )}
            {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
            <OrderConfirmationModal
              isOpen={showConfirmModal}
              onClose={() => setShowConfirmModal(false)}
              items={toCartItems(orderData.items)}
              total={orderData.total}
              name={orderData.name}
              phone={orderData.phone}
              address={orderData.deliveryType === 'delivery'
                ? `${orderData.address?.street}, –¥. ${orderData.address?.house}, –∫–≤. ${orderData.address?.apartment}, –ø–æ–¥—ä–µ–∑–¥ ${orderData.address?.entrance}, —ç—Ç–∞–∂ ${orderData.address?.floor}`
                : `–°–∞–º–æ–≤—ã–≤–æ–∑ –≤ ${orderData.pickupTime}`}
              comment={orderData.comment}
              fromBot={true}
            />
            {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑" –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
            {currentStep === 'confirm' && (
              <button
                onClick={handleFinalConfirm}
                className="mt-4 w-full px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                disabled={isTyping}
              >
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
              </button>
            )}
            {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑" –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥ */}
            {currentStep === 'order' && orderData.items.length > 0 && (
              <button
                onClick={() => {
                  console.log('BotonicChat: –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑" –Ω–∞–∂–∞—Ç–∞');
                  console.log('BotonicChat: current orderData before save', orderData);
                  console.log('BotonicChat: orderData.items.length:', orderData.items.length);
                  console.log('BotonicChat: orderData.items:', orderData.items);
                  
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
                  const cartItems = orderData.items.map((item, index) => ({
                    id: `bot-${index}`,
                    name: item.name,
                    price: item.price,
                    quantity: item.quantity,
                    image: '',
                    selectedAdditives: []
                  }));
                  console.log('BotonicChat: —Å–æ—Ö—Ä–∞–Ω—è–µ–º cartItems –≤ localStorage:', cartItems);
                  console.log('BotonicChat: JSON.stringify(cartItems):', JSON.stringify(cartItems));
                  localStorage.setItem('cart', JSON.stringify(cartItems));
                  console.log('BotonicChat: –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                  const savedCart = localStorage.getItem('cart');
                  console.log('BotonicChat: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', savedCart);
                  
                  const formData = {
                    name: orderData.name,
                    phone: orderData.phone,
                    address: {
                      street: orderData.address?.street || '',
                      house: orderData.address?.house || '',
                      apartment: orderData.address?.apartment || '',
                      entrance: orderData.address?.entrance || '',
                      floor: orderData.address?.floor || ''
                    },
                    comment: orderData.comment,
                    isPickup: orderData.deliveryType === 'pickup',
                    pickupTime: orderData.pickupTime || ''
                  };
                  console.log('BotonicChat: saving checkout_form_data', formData);
                  const expiry = new Date().getTime() + 30 * 24 * 60 * 60 * 1000;
                  localStorage.setItem('checkout_form_data', JSON.stringify({ data: formData, expiry }));
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
                  const finalSavedCart = localStorage.getItem('cart');
                  console.log('BotonicChat: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage:', finalSavedCart);
                  
                  console.log('BotonicChat: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ checkout —á–µ—Ä–µ–∑ 200ms');
                  setTimeout(() => {
                    window.location.href = '/checkout';
                  }, 200);
                }}
                className="mt-4 w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                disabled={!isOrderReady || isTyping}
              >
                {(() => {
                  const deliveryCost = orderData.deliveryType === 'delivery' && orderData.total < 500 ? 150 : 0;
                  const finalTotal = orderData.total + deliveryCost;
                  return `–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ (${finalTotal}‚ÇΩ)`;
                })()}
              </button>
            )}
          </div>
        </div>
      )}
    </div>
  );
} 